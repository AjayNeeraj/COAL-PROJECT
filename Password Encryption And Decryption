INCLUDE Irvine32.inc

BUFMAX = 128

.data
    msgboxprompt BYTE "Welcome! Click OK to begin",0
    msgboxprompt1 BYTE "Click 'Ok' to view Encrypted/Decrypted text",0
    sPrompt1 BYTE "Enter normal text: ",0
    sPrompt2 BYTE "Enter ciphered text: ",0
    sEncrypt BYTE "Cipher text: ",0
    sDecrypt BYTE "Decrypted text: ",0
    sChoice BYTE "Click 'Yes' to Encrypt or 'No' to Decrypt: ",0
    invalidInput BYTE "Invalid choice. Please enter 1 or 2.",0

    buffer BYTE BUFMAX+1 DUP(0)
    bufSize DWORD ?
    choice DWORD ?
    KEY BYTE 'z','^','?','>','7','~'
    msg BYTE " XOR ",0
    msgEquals BYTE " = ",0
    projectHeader BYTE "--------- Project Members ---------",0
    member1 BYTE "Ajay Kumar 23K-0514",0
    member2 BYTE "Zayan Ahmed 23K-0514",0
    member3 BYTE "Saud Imran 23K-0514",0
    projectFooter BYTE "-----------------------------------------------",0
    resultMsg BYTE "RESULT: ",0

.code
main PROC

        xor edx, edx
        mov eax, 11
        call settextcolor
        xor eax, eax
        call GetUserChoice
        cmp choice, 1
        je Encryption
        cmp choice, 2
        je Decryption
        mov edx, OFFSET invalidInput
        call writeString
        call Crlf
        jmp main

    Encryption:
        mov edx, OFFSET sprompt1
        call InputTheString
        call DisplayProjectMembers
        call TranslateBuffer
        mov edx, OFFSET msgboxprompt1
        call msgbox
        xor edx, edx
        mov edx, OFFSET sEncrypt
        call DisplayMessage
        jmp ExitP

    Decryption:
        mov edx, OFFSET sprompt2
        call InputTheString
        call DisplayProjectMembers
        call TranslateBuffer
        mov edx, OFFSET msgboxprompt1
        call msgbox
        xor edx, edx
        mov edx, OFFSET sDecrypt
        call DisplayMessage
        jmp ExitP

    ExitP:
        call waitmsg
        call clrscr
        jmp main
        exit

main ENDP


GetUserChoice PROC

    pushad
    mov edx, OFFSET msgboxprompt
    call msgbox
    mov edx, OFFSET sChoice
    call msgboxask
    cmp eax, 6
    je choice1
    mov choice, 2
    jmp done
choice1:
    mov choice, 1
done:
    popad
    ret

GetUserChoice ENDP


InputTheString PROC

    pushad
    call WriteString
    mov ecx, BUFMAX
    mov edx, OFFSET buffer
    call readstring
    mov bufSize, eax
    call Crlf
    popad
    ret

InputTheString ENDP


DisplayProjectMembers PROC

    pushad
    call Crlf
    mov edx, OFFSET projectHeader
    call WriteString
    call Crlf
    mov edx, OFFSET member1
    call WriteString
    call Crlf
    mov edx, OFFSET member2
    call WriteString
    call Crlf
    mov edx, OFFSET member3
    call WriteString
    call Crlf
    mov edx, OFFSET projectFooter
    call WriteString
    call Crlf
    call Crlf
    popad
    ret

DisplayProjectMembers ENDP


DisplayMessage PROC

    pushad
    call WriteString
    mov edx, OFFSET buffer
    call WriteString
    call Crlf
    call Crlf
    popad
    ret

DisplayMessage ENDP

TranslateBuffer PROC

    pushad
    mov ecx, bufSize
    mov esi, 0
    mov edi, 0
L1:
    mov al, KEY[edi]
    xor buffer[esi], al
    inc esi
    inc edi
    cmp edi, 6
    jne cont
    mov edi, 0
cont:
    loop L1
    popad
    ret

TranslateBuffer ENDP

END main
